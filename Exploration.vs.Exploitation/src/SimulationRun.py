import numpy
import matplotlib.pyplot as plt
import logging
import timeit
import SimulationResult
import SimulationUtils
import Simulation1

logger = logging.getLogger('SimulationLogger')


# Set the log levels
logger.setLevel(logging.WARN)

# The number of dimensions of reality
# 30 is the nubmer from the original experiment
m = 30

# number of individuals  in the organization
# 50 is the nubmer from the original experiment
n = 50

# number of times to run the simulation
# 80 is the number from the original experiment
iterations = 80

numberOfTimesToSimulate = 50

# effectiveness of learning
# The p values represent the probability of change
# p1 effectiveness of learning FROM the code (socialization) 
# p2 effectiveness of learning BY the code
p1 = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
#p2 = [0.1,0.5,0.9]
#p1 = [0.5]
p2 = [0.1]

#plt.close('all')

plt.xlabel('Socialization Rate (p1)')
plt.ylabel('Average Equilibrium Knowledge')
plt.axis([0.0, 1.0, 0.60, 1.0])

for p2ct in p2:

    codeIndex = list()
    avgIndividualIndex = list()
    
    for p1ct in p1:
        codeResultsList = list()
        individualAverageList = list()
        
        for ct in range(0,numberOfTimesToSimulate):            
            start = timeit.default_timer()
            simResults = Simulation1.runSimulation(m,n,iterations,p1ct,p2ct,logger)
            codeResultsList.append(simResults.codeAveragePercent)
            stop = timeit.default_timer()
            print "Execution Time : "+str(stop - start )
            individualAverageList.append(simResults.individualAveragePercent)

        codeIndex.append(float(sum(codeResultsList))/float(numberOfTimesToSimulate))
        avgIndividualIndex.append(float(sum(individualAverageList))/float(numberOfTimesToSimulate))
    
    print ""
    print "sim complete"
    print "length "+str(len(p1))+"  "+str(len(avgIndividualIndex))+""    
    print "for p1 "+str(p1)
    print "for avgIndex is : "+str(avgIndividualIndex)
    print "for codeIndex : "+str(codeIndex)
    
    plt.plot(p1, avgIndividualIndex, str(p2ct), label = "p2 = %.2f"%p2ct)
    plt.text(p1[0], avgIndividualIndex[0]+0.01, 'p2 =  %.2f'%p2ct)
    
plt.show()
