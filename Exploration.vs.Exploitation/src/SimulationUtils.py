import numpy as np
import logging


def findSimularitiesCount(belief1, belief2):
    return len(belief1) - findDifferenceCount(belief1, belief2)

#
# Find the differances between two beliefs
# ignore the differances if the first belief has a 0 (neutral) belief
#
def findDifferenceCount(belief1, belief2):
    
    diffrences = 0
    
    for count, belief in enumerate(belief1):
        #belief1[count] != 0 and 
        #print("    "+str(belief1[count])+"  compare to  "+str(belief2[count]) ) 
        if(belief1[count] != belief2[count]):
            diffrences = diffrences+1
    
    return diffrences
    
#
# Change the beliefs of the learning belief to match that of the target belief
# with a probability of probabilityOfchange
#
def changeBeliefs(learningBelief, targetBelief, probabilityOfChange, skipZero, logger ):
    logger.debug( "learing belief "+str(learningBelief) )
    logger.debug( "target belief "+str(targetBelief) )
    logger.debug( "probabilityOfChange "+str(probabilityOfChange))

    for index, belief in enumerate(learningBelief):
        logger.debug( "index: "+str(index)+" learning belief "+str(belief)+" target belief is "+str(int(targetBelief[index])) )
        if( skipZero and targetBelief[index] == 0 ): 
            continue
        elif ( learningBelief[index] != targetBelief[index] ) :
            if( np.random.binomial(1, probabilityOfChange) == 1 ):
                learningBelief[index] = targetBelief[index]
                logger.debug( "changing..." )
                #print "learningBelief is "+str(learningBelief)
                #print "targetBelief is "+str(targetBelief)
                #print "learningBelief["+str(index)+"] is "+str(learningBelief[index])
                #print "targetBelief["+str(index)+"] is "+str(targetBelief[index])
            else:
                logger.debug( "not Changing" )
                    

def findAvgSimularity(code, individuals):
    totalSimularity = 0
    
    for index, individual in enumerate(individuals):
        totalSimularity = totalSimularity + findSimularitiesCount(code, individual)
    
    return ( float(totalSimularity) / float(len(individuals)) )