import numpy
import matplotlib.pyplot as plt
import logging
import SimulationResult
import SimulationUtils

def runSimulation(m,n,iterations,p1,p2, logger):

    logger.info( "Staring Simulation for Exploration vs. Exploitation!" )

    # Randomly initialize reality with values -1 or 1
    externalReality = numpy.random.randint(0,2,m)
    externalReality[externalReality==0] = -1 # convert 0's to -1

    # Randomly initalize the individuals with -1,0,1 as an n x m matrix
    individuals = numpy.random.randint(-1,2,size=(n,m))

    # create an empty set of beliefs
    # represneted by an m length array filled with 0's
    code = numpy.empty(m)
    code.fill(0)    

    #preCodeRealityIndex = SimulationUtils.findSimularitiesCount(code, externalReality, m)
    #preIndAvgSimularityIndex = SimulationUtils.findAvgSimularity(code,individuals)
    
    logger.info(  "Data  initialized" )
    logger.info(  "externalReality: "+str(externalReality) )
    logger.info( "code beliefs are: "+str(code) )
    #logger.info( "pre learning average individual reality index : "+str(preIndAvgSimularityIndex))
    
    # Run the simulation for the desired number of iterations
    for simCount in range(0, iterations):
        
        logger.info("")
        logger.info("")
        logger.info("Iteration  number %d " % (simCount+1) )
        
        #how close is the code to reality
        codeRealitySimulatiryIndex = SimulationUtils.findSimularitiesCount(code, externalReality)
        
        #logger.debug("    Code is "+str(code)+" with Reality Index "+str(codeRealitySimulatiryIndex)+"\n")
        
        higherRealitySimularityList = None
        lowerOrEqualRealitySimularityList = list()       
#        
# The first loop adapts individuals (further from reality beliefs) to the code 
# while saving the list of individuals that have a higher reality simularity
#
        for index, individual in enumerate(individuals):
            individualRealitySimulatiryIndex = SimulationUtils.findSimularitiesCount(externalReality, individual)
            individualRealitySimulatiryIndexPercent = float(individualRealitySimulatiryIndex) / float(len(code)) * 100

            #logger.debug("    For individual index "+str(index))
            #logger.debug("    For individual "+str(individual))
            #logger.debug("    reality Index is "+str(individualRealitySimulatiryIndex))
            #logger.debug("    reality Index Percent is "+str(individualRealitySimulatiryIndexPercent)+"\n")
             
 
            if(individualRealitySimulatiryIndex > codeRealitySimulatiryIndex):  
                #
                # store the list of individuals with a higher reality index compared to the code.
                # Multiply them by their index. This gives an individual more of a 'vote'
                # when generating a concencous array
                #    
                if( higherRealitySimularityList is None ):
                    higherRealitySimularityList = numpy.array([individual])*individualRealitySimulatiryIndexPercent
                else:
                    higherRealitySimularityList = numpy.vstack((higherRealitySimularityList, numpy.array(individual)*individualRealitySimulatiryIndexPercent) )          
            else:
                lowerOrEqualRealitySimularityList.append(index)

#                
# Change the beliefs of the code to the higher reality individuals
# do an average of all the higher individuals then round to get an individual consencous        
#
        if( higherRealitySimularityList is None ):
            logger.debug( "No individuals hold a higher belief then the code!" )           
        else: 
            if( higherRealitySimularityList is not None ):   
                higherIndvCount = len(higherRealitySimularityList)
                #logger.debug("    "+str(higherIndvCount)+" individuals hold a higher belief then the code!" ) 
                if( higherIndvCount == 1 ):
                    #logger.debug("    higherRealitySimularityList is "+str(higherRealitySimularityList))
                    #logger.debug("    higherRealitySimularityList[0] is "+str(higherRealitySimularityList[0]))
                    sumList = higherRealitySimularityList[0]
                else:
                    #logger.debug("    higher beliefs are: \n"+str(higherRealitySimularityList))
                    sumList = higherRealitySimularityList.sum(axis=0)
                    #logger.debug("    raw agreement of higher beliefs are : "+str(sumList))   
                         
                sumList[sumList < 0] = -1
                sumList[sumList > 0] = 1      
                
                #logger.debug("    agreement of higher beliefs are : "+str(sumList)+"\n")
                #logger.debug("    before learning code is "+str(code)+"  reminder reality is "+str(externalReality))        
                # Finally change the codes beliefs    
                SimulationUtils.changeBeliefs(code, sumList, p2, False, logger)
    
        #logger.debug( "    after learning with p of "+str(p2)+" code is: "+str(code)+" with reality index: "+str(SimulationUtils.findSimularitiesCount(code, externalReality))+"\n" )

#
# Change the beliefs of the individuals whose reality index 
# is less then or equal to the code to match the code
#
        logger.info("    lowerOrEqualRealitySimularityList is "+str(lowerOrEqualRealitySimularityList))
        
        for index in lowerOrEqualRealitySimularityList:
            individual = individuals[index]
            #logger.debug("        code is "+str(code))
            #logger.debug("        individual is "+str(individual)+" with index "+str(index)+" and reality index "+str(SimulationUtils.findSimularitiesCount(individual, externalReality)))
            SimulationUtils.changeBeliefs(individual, code, p1, True, logger)
            #logger.debug("        after learning with p of "+str(p1)+" individual is "+str(individual)+" with reality index "+str(SimulationUtils.findSimularitiesCount(individual, externalReality))+"\n")

        #for index, individual in enumerate(individuals):
        #    individualRealitySimulatiryIndex = SimulationUtils.findSimularitiesCount(externalReality, individual)
        #    logger.debug("    For individual "+str(individual)+" with index "+str(index))
        #    logger.debug("    reality Index is "+str(individualRealitySimulatiryIndex))

        #logger.debug( "    after learning individual average : "+str(SimulationUtils.findAvgSimularity(code,individuals)) )

    individualReality = SimulationUtils.findAvgSimularity(externalReality,individuals)
    #individualReality = SimulationUtils.findAvgSimularity(code,individuals)
    #codeReality = SimulationUtils.findSimularitiesCount(code, externalReality)
    individualPercent =   float(individualReality)/float(m)
    #codePercent = float(codeReality)/float(m)
        
    print ""
    print "        Results"
    print "---------------------------"
    print "for p1: "+str(p1)+" and p2: "+str(p2)
    #print "before sim code reality index is "+str(preCodeRealityIndex)        
    #print "before sim individual avg simularity index is "+str(preIndAvgSimularityIndex)    
    print "individual reality index is (on average) : "+str(individualReality)
    #print "code reality index is : "+str(codeReality)
    print "individual reality index percentage is (on average) : %.2f" % individualPercent
    #print "code reality index percentage is : %.2f " % codePercent    

    return SimulationResult.SimulationResult(individualReality, 0, individualPercent, 0)



