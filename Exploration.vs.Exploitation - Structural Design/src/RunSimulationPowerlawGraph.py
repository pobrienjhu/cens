import numpy
import matplotlib.pyplot as plt
import networkx
from networkx.generators.community import *
import logging
import timeit
import SimulationUtils
import Simulation
import PowerlawGraphGenerator


logger = logging.getLogger('SimulationLogger')

dir = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/powerlaw-graph"

# Set the log levels
logger.setLevel(logging.INFO)

# The number of dimensions of reality
# 30 is the number from the original March experiment
m = [100] #[40,70,100,130,160]

# number of individuals  in the organization
# 50 is the number from the original March experiment
n = [140] #,210,280,350,420]

# nodes per edge
z = [7,14,28,70,140]

#rewiring probability
B = [0]#,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

# degree of complexity
s = [5] #1,3,5,7,10]

# effectiveness of learning
# The p values represent the probability of change
# p1 effectiveness of learning (socialization) 
pl = [0.3] #[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

#probability of a triangle after adding a random edge
ptri = [0] #[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]

#probability of turnover
pt = [0] #, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0]

#probability of change in each element of reality
pe = [0] #,0.4,0.7]

#interval of environmental change
T = 200

# number of times to run the simulations
iterations = 100
recordEachRun = False

# Run the simulation for the caveman graph
for zIndex, zValue in enumerate(z):            
    for ptriIndex, ptriValue in enumerate(ptri):                  
        graphGenerator = PowerlawGraphGenerator.PowerlawGraphGenerator(zValue,ptriValue,dir) #CavemanGraphGenerator(zValue)
        Simulation.simulation(m,n,s,pl,pt,pe,T,iterations,graphGenerator,dir,recordEachRun)

