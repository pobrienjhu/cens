import SimulationUtils
import simulate
import numpy
import logging
import csv
import time
import os
from networkx.generators.community import *

logger = logging.getLogger('Simulation')

# Set the log levels
logger.setLevel(logging.INFO)

def simulation(m,n,s,pl,pt,pe,T,iterations,graphGenerator,dir,recordEachRun=False,runToConvergeLimit=False):


    
    for nIndex, nValue in enumerate(n):
        
        graph = graphGenerator.generateGraph(nValue)
        
        for mIndex, mValue in enumerate(m):            
            for sIndex, sValue in enumerate(s): 
                for plIndex, plValue in enumerate(pl):
                    for ptIndex, ptValue in enumerate(pt):
                        for peIndex, peValue in enumerate(pe):
                            for simCount in range(0,iterations):
                                reality = SimulationUtils.generateReality(mValue)                        
                                # Randomly initalize the individuals with -1,0,1 as an n x m matrix
                                individuals = numpy.random.randint(-1,2,size=(nValue,mValue))                                                
                                logger.info(str(simCount+1)+" n: "+str(nValue)+" m: "+str(mValue)+" s: "+str(sValue)+" pl: "+str(plValue)+" Graph Information: "+graphGenerator.graphInformation() )
                                simDir = str(nValue)+"-"+str(mValue)+graphGenerator.graphFileInformation()
                                SimulationUtils.validateDir(dir+"/"+simDir)
                                file = open(dir+"/"+simDir+"/"+str(nValue)+"-"+str(mValue)+"-"+str(ptValue)+"-"+str(T)+"-"+str(peValue)+"-"+graphGenerator.graphFileInformation()+"-simulation-"+str(time.time())+".csv", "ab") # opens the csv file
                                writer = csv.writer(file, delimiter=',')                      
                                simulate.simulate(graph, graphGenerator.graphData(), individuals, reality, plValue, sValue, ptValue, peValue, T, writer, recordEachRun,runToConvergeLimit)
                                file.close()                                                                                           

