from os import listdir
from os.path import isfile, join
import os
import logging
import csv
import sys
from collections import defaultdict
import numpy
import matplotlib.pyplot as plot
import matplotlib.lines as mlines


logger = logging.getLogger('Analysize WS Graph for Performance')

# Set the log levels
logger.setLevel(logging.INFO)

mypath = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/ws-graph-FangLee"

lineStyles = {2:':', 4:'--', 6:':', 8:'--', 10:':', 14:'--', 28:':', 70:':'}
lineMarkers = {2:'.', 4:',', 6:'o', 8:'v', 10:'^', 14:'<', 28:'>', 70:'1'}

#dictonary = defaultdict(list)
kDictonary = defaultdict(dict)

filesProcessedCount = 0

for root, dirs, files in os.walk(mypath):
    for fileSt in files:
        if(fileSt.endswith("csv") ):
            logger.debug( "    "+str(fileSt) )
            file = open(str(root)+"/"+str(fileSt), "r")
            #for line in file:
            #    print line
            try:
                reader = csv.reader(file, delimiter=',')
                csvFile = list(reader)
                numLines = len(csvFile)
                k = int(csvFile[numLines-1][7]) 
                                
                # we are only looking at subgroup 14 for now. 
                if( k == 6 or k == 8 or k == 10 or k == 14 ):                
                    b = csvFile[numLines-1][8]
                    p = csvFile[numLines-1][10]
                    logger.debug(fileSt+" numLines "+str(numLines)+" B is "+str(b)+" Performance is "+str(p) )
                    logger.debug( "B is "+str(b) )
                    logger.debug( "Performance is "+str(p) )
                        
                    #dictonary[float(b)].append(int(p))
                    if(k not in kDictonary):
                        kDictonary[k] = defaultdict(list)
                        
                    kDictonary[k][float(b)].append(int(p))
        
                    filesProcessedCount += 1
                
                
            except:
                e = sys.exc_info()
                logger.warn( "unable to open file |"+str(root)+"/"+str(fileSt)+"|" )
                logger.error( e )
            
            file.close()
                   
logger.info(str(filesProcessedCount)+" Files loaded and processed. Dictonary populated !!!!!!!!!!!!!!")

sortedKeys = sorted(kDictonary.keys(), key=float)   
                                                
logger.info("k Dictonary sorted ")                
logger.info(sortedKeys)                                

plot.axis([0,0.2, 55, 80])
plot.xlabel(r"$\beta$")
plot.ylabel("Perfromance")
plot.title("Organizational Structure and Equilibrium Performance Outcome for WS graph")

plotHandles = []

for kKey in sortedKeys:
    dDictonary = kDictonary.get(kKey)                                                

    dSortedKeys = sorted(dDictonary.keys(), key=float)   
                                                
    logger.debug("d Dictonary "+str(kKey)+" sorted ")                
    logger.debug(dSortedKeys) 

    bArray = []
    meanArray = [] 
    #tenthPrecentileArray = []
    #ninetithPrecentileArray = []
    
    for dKey in dSortedKeys:
        elements = dDictonary.get(dKey)
        mean = numpy.mean(numpy.array(elements))
        #tenthPrecentile = numpy.percentile(numpy.array(elements), 10)
        #ninetithPrecentile = numpy.percentile(numpy.array(elements), 90)
        logger.debug( str(dKey) + " " + str(mean) )    
        bArray.append(dKey)
        meanArray.append(mean)  
        #tenthPrecentileArray.append(tenthPrecentile)
        #ninetithPrecentileArray.append(ninetithPrecentile)     

    logger.info('kKey is '+str(kKey)+' linestyle is '+str(lineStyles[kKey]))
    logger.debug( bArray )
    logger.debug( meanArray )
    #+str(lineStyles[kKey])
    meanLine = mlines.Line2D([], [], color='black', linestyle=str(lineStyles[kKey]), marker=str(lineMarkers[kKey]), markersize=5, label=str(kKey)+' Mean')
    plot.plot(bArray, meanArray, 'k', linestyle=str(lineStyles[kKey]), marker=str(lineMarkers[kKey]), markersize=5)
    plotHandles.append(meanLine)
    #logger.info( tenthPrecentileArray )
    #logger.info( ninetithPrecentileArray )

logger.info(plotHandles)

plot.legend(handles=plotHandles)    
plot.grid()
plot.show()                        
                                                                              