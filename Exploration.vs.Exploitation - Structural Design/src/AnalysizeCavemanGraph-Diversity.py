from os import listdir
from os.path import isfile, join
import os
import logging
import csv
import sys
from collections import defaultdict
import numpy
import matplotlib.pyplot as plot
import matplotlib.lines as mlines

def evenUpArrays(means, timeArray):
    meansLen = len(means)
    for ct in range(meansLen, len(timeArray)):
        means.append( means[meansLen-1] )

logger = logging.getLogger('Analysize Caveman Graph for Diversity')

# Set the log levels
logger.setLevel(logging.INFO)

mypath = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/caveman-graph-FangLee"

dictonary = defaultdict(list)

filesProcessedCount = 0

for root, dirs, files in os.walk(mypath):
        
    for fileSt in files:
        if(fileSt.endswith("csv") ):
            #logger.debug( "    "+str(fileSt) )
            file = open(str(root)+"/"+str(fileSt), "r")
            try:
                reader = csv.reader(file, delimiter=',')
                csvFile = list(reader)
                numLines = len(csvFile)
                if(numLines > 10):
                    b = csvFile[numLines-1][5]
                    logger.debug(fileSt+" numLines "+str(numLines)+" B is "+str(b) )
                    logger.debug( "B is "+str(b) )
                    #diversity = defaultdict(list)
                    diversity = []
                    for line in range(2, numLines-2):
                            time = csvFile[line][0]
                            dissim = csvFile[line][2]
                            #diversity[int(time)].append(float(dissim)) 
                            diversity.append(float(dissim))          
                
                    dictonary[float(b)].append(diversity)
                    filesProcessedCount += 1
                
            except:
                e = sys.exc_info()
                logger.warn( "unable to open file |"+str(root)+"/"+str(fileSt)+"|" )
                logger.error( e )
            
            file.close()
                   
logger.info(str(filesProcessedCount)+" Files loaded and processed. Dictonary populated !!!!!!!!!!!!!!")

sortedKeys = sorted(dictonary.keys(), key=float)   
                                                
logger.info("Dictonary sorted ")                
logger.info(sortedKeys)                
                
timeArray = numpy.arange(0., 500., 1)                
                
elements = dictonary.get(0)
means0 = [sum(column)/len(column) for column in zip(*elements)]
#means0Len = len(means0)
#for ct in range(means0Len, len(timeArray)):
#    means0.append( means0[means0Len-1] )
evenUpArrays(means0, timeArray)    
plot.plot(timeArray, means0, 'k-.')

elements = dictonary.get(0.1)
means1 = [sum(column)/len(column) for column in zip(*elements)]
evenUpArrays(means1, timeArray)    
plot.plot(timeArray, means1, 'k:')

elements = dictonary.get(0.5)
means5 = [sum(column)/len(column) for column in zip(*elements)]
evenUpArrays(means5, timeArray)    
plot.plot(timeArray, means5, 'k')

elements = dictonary.get(1)
means10 = [sum(column)/len(column) for column in zip(*elements)]
evenUpArrays(means10, timeArray)    
plot.plot(timeArray, means10, 'k--')
    
for key in sortedKeys:
    logger.info( key )
    #elements = dictonary.get(key)
    #means = [sum(column)/len(column) for column in zip(*elements)]

    #logger.info( elements )    
    

plot.axis([0, 500, 0,0.8])
plot.xlabel("Time")
plot.ylabel("Dissimilarity")
plot.title("Diversity of Beliefs Over Time")

zero = mlines.Line2D([], [], color='black', linestyle='-.', markersize=15, label=r'$\beta = 0$')
tenth = mlines.Line2D([], [], color='black', linestyle=':', markersize=15, label=r'$\beta = 0.1$')
fifty = mlines.Line2D([], [], color='black', markersize=15, label=r'$\beta = 0.5$')
full = mlines.Line2D([], [], color='black', linestyle='--', markersize=15, label=r'$\beta = 1$')
plot.legend(handles=[zero,tenth,fifty,full])

#plot.text(400, 0.7, r'-. $\beta = 0$')
#plot.text(400, 0.65, r".. $\beta = 0.1$")
#plot.text(400, 0.6, r"-  $\beta = 0.5$")
#plot.text(400, 0.55,  r"-- $\beta = 1$")
#plot.plot(bArray, meanArray, 'k', bArray, tenthPrecentileArray, 'k:', bArray, ninetithPrecentileArray, 'k--' )
plot.show()                        
                                                                              