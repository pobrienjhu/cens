from os import listdir
from os.path import isfile, join
import os
import logging
import csv
import sys
from collections import defaultdict
import numpy
import matplotlib.pyplot as plot
import matplotlib.lines as mlines

def evenUpArrays(means, timeArray):
    meansLen = len(means)
    for ct in range(meansLen, len(timeArray)):
        means.append( means[meansLen-1] )

logger = logging.getLogger('Analysize Caveman Graph for SubGroup Size')

# Set the log levels
logger.setLevel(logging.INFO)

mypath = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/caveman-graph-FangLee"

betaToLookAt = {0:"",0.1:"",0.2:"",0.3:"",0.4:"",0.5:"",0.6:"",0.7:"",0.8:"",0.9:"",1:""}

resultsHeap = {7:defaultdict(list),14:defaultdict(list),28:defaultdict(list),70:defaultdict(list),140:defaultdict(list)}
#dictonary = defaultdict(list)

logger.info( (0.1 in betaToLookAt) )

filesProcessedCount = 0

for root, dirs, files in os.walk(mypath):
    for fileSt in files:
        if(fileSt.endswith("csv") ):
            #logger.debug( "    "+str(fileSt) )
            file = open(str(root)+"/"+str(fileSt), "r")
            #for line in file:
            #    print line
            try:
                reader = csv.reader(file, delimiter=',')
                csvFile = list(reader)
                numLines = len(csvFile)
                b = csvFile[numLines-1][5]
                
                if(float(b) in betaToLookAt ):               
                    p = csvFile[numLines-1][7]
                    z = csvFile[numLines-1][4]
                    logger.debug(fileSt+" numLines "+str(numLines)+" B is "+str(b)+" Performance is "+str(p) )
                    logger.debug( "B is "+str(b) )
                    logger.debug( "z is "+str(z) )
                    logger.debug( "Performance is "+str(p) )
                    dictonary = resultsHeap.get(int(z))
                    dictonary[float(b)].append(int(p))
                
                filesProcessedCount += 1
                
            except:
                e = sys.exc_info()
                logger.warn( "error processing file |"+str(root)+"/"+str(fileSt)+"|" )
                logger.error( e )
            
            file.close()

                   
logger.info(str(filesProcessedCount)+" Files loaded and processed. Dictonary populated !!!!!!!!!!!!!!")

sortedKeys = sorted(resultsHeap.keys(), key=float)   
sortedSubKeys = sorted(betaToLookAt.keys(), key=float)   
                                                                                            
logger.debug("Dictonary sorted ")                
logger.debug(sortedKeys)                
logger.debug(sortedSubKeys)    

graphHeap = {7:[],14:[],28:[],70:[],140:[]}
            
                                    
for key in sortedKeys:
    logger.debug( key )
    elements = resultsHeap.get(key)
    
    for subKey in sortedSubKeys:
        logger.debug( str(key)+" "+str(subKey) )
        subElements = elements.get(subKey)
        logger.debug( subElements )    
        mean = numpy.mean(numpy.array(subElements))
        logger.debug( mean ) 
        graphHeap.get(key).append( mean )
        

        

plot.axis([0,1.0, 0, 100])
plot.xlabel(r"$\beta$")
plot.ylabel("Perfromance")
plot.title("Effect of Subgroup Size on Organizational Performance")
seven_line = mlines.Line2D([], [], color='black', marker='^', markersize=15, label='z = 7 (5%)')
fourteen_line = mlines.Line2D([], [], color='black', marker='s', markersize=15, label='z = 14 (10%)')
twentyeight_line = mlines.Line2D([], [], color='black', marker='p', markersize=15, label='z = 28 (20%)')
seventy_line = mlines.Line2D([], [], color='black', marker='*', markersize=15, label='z = 70 (50%)')
onefourty_line = mlines.Line2D([], [], color='black', marker='x', markersize=15, label='z = 140 (100%)')

plot.legend(handles=[seven_line,fourteen_line,twentyeight_line,seventy_line,onefourty_line])

plot.plot(
    sortedSubKeys, graphHeap.get(7), 'k-^', 
    sortedSubKeys, graphHeap.get(14), 'k-s', 
    sortedSubKeys, graphHeap.get(28), 'k-p', 
    sortedSubKeys, graphHeap.get(70), 'k-*', 
    sortedSubKeys, graphHeap.get(140), 'k-x' )
    
plot.show()                       
                                                                              