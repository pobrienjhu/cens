from os import listdir
from os.path import isfile, join
import os
import logging
import csv
import sys
from collections import defaultdict
import numpy
import matplotlib.pyplot as plot
import matplotlib.lines as mlines


logger = logging.getLogger('Analysize Caveman Graph for Performance')

# Set the log levels
logger.setLevel(logging.INFO)

mypath = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/caveman-graph-FangLee"

dictonary = defaultdict(list)

filesProcessedCount = 0

for root, dirs, files in os.walk(mypath):
    for fileSt in files:
        if(fileSt.endswith("csv") ):
            logger.debug( "    "+str(fileSt) )
            file = open(str(root)+"/"+str(fileSt), "r")
            #for line in file:
            #    print line
            try:
                reader = csv.reader(file, delimiter=',')
                csvFile = list(reader)
                numLines = len(csvFile)
                z = int(csvFile[numLines-1][4]) 
                
                # we are only looking at subgroup 7 for now. 
                if( z == 7 ):                
                    b = csvFile[numLines-1][5]
                    p = csvFile[numLines-1][7]
                    logger.debug(fileSt+" numLines "+str(numLines)+" B is "+str(b)+" Performance is "+str(p) )
                    logger.debug( "B is "+str(b) )
                    logger.debug( "Performance is "+str(p) )
                    
                    dictonary[float(b)].append(int(p))
                    
                    filesProcessedCount += 1
                
            except:
                e = sys.exc_info()
                logger.warn( "unable to open file |"+str(root)+"/"+str(fileSt)+"|" )
                logger.error( e )
            
            file.close()
                   
logger.info(str(filesProcessedCount)+" Files loaded and processed. Dictonary populated !!!!!!!!!!!!!!")

sortedKeys = sorted(dictonary.keys(), key=float)   
                                                
logger.info("Dictonary sorted ")                
logger.info(sortedKeys)                
                
bArray = []
meanArray = [] 
tenthPrecentileArray = []
ninetithPrecentileArray = []
    
for key in sortedKeys:
    elements = dictonary.get(key)
    mean = numpy.mean(numpy.array(elements))
    tenthPrecentile = numpy.percentile(numpy.array(elements), 10)
    ninetithPrecentile = numpy.percentile(numpy.array(elements), 90)
    logger.debug( str(key) + " " + str(mean) )    
    bArray.append(key)
    meanArray.append(mean)  
    tenthPrecentileArray.append(tenthPrecentile)
    ninetithPrecentileArray.append(ninetithPrecentile)     

logger.info( bArray )
logger.info( meanArray )
logger.info( tenthPrecentileArray )
logger.info( ninetithPrecentileArray )

plot.axis([0,1.0, 0, 120])
plot.xlabel(r"$\beta$")
plot.ylabel("Perfromance")
plot.title("Organizational Structure and Equilibrium Performance Outcome")

tenthPercentile = mlines.Line2D([], [], color='black', linestyle=':', markersize=15, label='10th Precentile')
mean = mlines.Line2D([], [], color='black', markersize=15, label='Mean')
nintethPrecentile = mlines.Line2D([], [], color='black', linestyle='--', markersize=15, label='90th Precentile')
plot.legend(handles=[tenthPercentile,mean,nintethPrecentile])

#plot.text(0.65, 15, ".. 10th Precentile")
#plot.text(0.65, 10, "- Mean")
#plot.text(0.65, 5, "-- 90th Precentile")
plot.plot(bArray, meanArray, 'k', bArray, tenthPrecentileArray, 'k:', bArray, ninetithPrecentileArray, 'k--' )
plot.show()                        
                                                                              