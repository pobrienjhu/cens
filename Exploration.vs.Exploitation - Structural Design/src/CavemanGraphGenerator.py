from networkx.generators.community import *
import GraphGenerator
import SimulationUtils

class CavemanGraphGenerator(GraphGenerator.GraphGenerator):
    
    
        def __init__(self,k,B,dir):
            # clique size
            self.k = k
            self.B = B
            self.dir = dir
    
        def generateGraph(self,nodeSize):
            self.nodeSize = nodeSize
            graph = connected_caveman_graph(nodeSize/self.k,self.k)
            if(self.B == 0):
                return self.saveGraph(self.dir,graph)
            else:
                graph = SimulationUtils.rewireGraph(self.B,graph)
                return self.saveGraph(self.dir,graph)

        def graphName(self): 
            return "CavemanGraph"
    
        def graphFileInformation(self):
            return "-"+str(self.nodeSize)+"-"+str(self.k)+"-"+str(self.B)
    
        def graphInformation(self):
            return "k: "+str(self.k)+" B: "+str(self.B)
            
        def graphData(self):
            return [self.k,self.B]