from networkx.generators import *
import GraphGenerator
import SimulationUtils

class PowerlawGraphGenerator(GraphGenerator.GraphGenerator):
    
    
        def __init__(self,m,p,dir):
            # random edges for each node
            self.m = m
            #probability of a adding a triangle
            self.p = p
            self.dir = dir
    
        def generateGraph(self,nodeSize):
            self.nodeSize = nodeSize
            graph = powerlaw_cluster_graph(nodeSize, self.m, self.p )            
            return self.saveGraph(self.dir,graph)


        def graphName(self): 
            return "PowerlawGraph"
    
        def graphFileInformation(self):
            return "-"+str(self.nodeSize)+"-"+str(self.m)+"-"+str(self.p)
    
        def graphInformation(self):
            return "m: "+str(self.m)+" ptri: "+str(self.p)
            
        def graphData(self):
            return [self.m,self.p]