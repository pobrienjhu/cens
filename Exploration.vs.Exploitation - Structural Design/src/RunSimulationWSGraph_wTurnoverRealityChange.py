import logging
import SimulationUtils
import SimulationMultiThreaded
import WSGraphGenerator
import time


logger = logging.getLogger('SimulationLogger')

dir = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/ws-graph-turnover-realityChange"

# Set the log levels
logger.setLevel(logging.INFO)

# The number of dimensions of reality
# 30 is the number from the original March experiment
m = [100] #[40,70,100,130,160]

# number of individuals  in the organization
# 50 is the number from the original March experiment
n = [140] #,210,280,350,420]

# subgroup (clique) size
# not used in this one see k below for clustering 
z = [7] #,14,28,70,140]

# Each node is connected to k nearest neighbors in ring topology
# 8 showed the highest return in the performance test
k =[8]# [2,4,6,8,10,14,28,70]

#rewiring probability
# test diversity of beliefs over time
#B = [0,0.1,0.5,1]

# test performance over B
#B = [
#0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,
#0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,
#0.2,0.22,0.24,0.26,0.28,
#0.3,0.32,0.34,0.36,0.38,
#0.4,0.42,0.44,0.46,0.48,
#0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1]

# test turnover and reality change
#0.07 showed the highest return in the perfromance tests
B = [0.07] #0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]

# degree of complexity
s = [5] #1,3,5,7,10]

# effectiveness of learning
# The p values represent the probability of change
# p1 effectiveness of learning (socialization) 
pl = [0.3] #0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

#probability of turnover
pt = [0,0.01] #[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0]

#probability of change in each element of reality
pe = [0.1] #[0.1,0.4,0.7]

#interval of environmental change
T = 200

#learning temperature variables
learnTMin = 1.0
learnTMax = 1.0
learnTInc = 0.0

# number of different graphs to generate
graphsToRun = 1

# number of times to run the simulations
iterations = 10
recordEachRun = True
convergeLimit = 1000

# Run the simulation for the ws graph
for graphCount in range(0,graphsToRun): 
    timeStamp = time.time()    
    useDir = dir+"/run-"+str(timeStamp) 
    SimulationUtils.validateDir(useDir)       

    for kIndex, kValue in enumerate(k):            
        for bIndex, bValue in enumerate(B):                  
            graphGenerator = WSGraphGenerator.WSGraphGenerator(kValue,bValue,timeStamp,useDir) 
            SimulationMultiThreaded.startSimulation(m,n,s,pl,pt,pe,T,learnTMin,learnTMax,learnTInc,iterations,graphGenerator,dir,recordEachRun,convergeLimit)

