import SimulationUtils
import random
import numpy


def findHigherLearners(beliefs, payoffs, neighbors, nodePayoff):
    
    higherLearners = list()
    
    #print("beliefs are "+str(beliefs))
    
    for index, neighbor in enumerate(neighbors):
        if payoffs[neighbor] > nodePayoff :
            #print("adding higher learner "+str(neighbor)+" with beliefs "+str(beliefs[neighbor]))
            higherLearners.append(beliefs[neighbor])

    return higherLearners


def findConcensous( beliefs ):
    

    if(len(beliefs) == 0 ):
        return list()
    elif (len(beliefs) == 1 ):
        return beliefs[0]
                    
    concensous = numpy.asarray(map(sum,zip(*beliefs)))  
    #print("initial concensous is "+str(concensous))                     
    concensous[concensous < 0] = -1
    concensous[concensous > 0] = 1
    
    return concensous

#
# Change the beliefs of the learning belief to match that of the target belief
# with a probability of probabilityOfchange
#
def learn(student, teacher, probabilityOfChange ):
    print( "student belief "+str(student) )
    print( "teacher belief "+str(teacher) )
    print( "probabilityOfChange "+str(probabilityOfChange))

    #create a copy of the original beliefs where the learning will take place. 
    learnedBeliefs = list(student)

    for index, belief in enumerate(student):
        #print( "index: "+str(index)+" student belief "+str(student[index])+" teacher belief is "+str(int(teacher[index])) )
        if( teacher[index] == 0 ): 
            continue
        elif ( student[index] != teacher[index] ) :
            if random.random() < probabilityOfChange:
                learnedBeliefs[index] = teacher[index]
                #print( "changing..." )
                #print "learningBelief is "+str(learningBelief)
                #print "targetBelief is "+str(targetBelief)
                #print "learningBelief["+str(index)+"] is "+str(learningBelief[index])
                #print "targetBelief["+str(index)+"] is "+str(targetBelief[index])
            #else:
                #print( "not Changing" )

    return numpy.asarray(learnedBeliefs)


m = 100
n = 5
s = 5
p1 = 0.3

reality = SimulationUtils.generateReality(m)
            
# Randomly initalize the individuals with -1,0,1 as an n x m matrix
individuals = numpy.random.randint(-1,2,size=(n,m))

individualPayoffs = SimulationUtils.findAllPayoffs(individuals, reality, s)

print("reality for |"+str(m)+"| is |"+str(reality)+"|")
print("individuals are "+str(individuals))
print("individualPayoffs are "+str(individualPayoffs))

higherLearners = SimulationUtils.findHigherLearners(individuals, individualPayoffs, [1,2,3], individualPayoffs[0])

print("num of higherLerners are "+str(len(higherLearners)))

concensous = SimulationUtils.findConcensous(higherLearners)

print("concensous is "+str(concensous))

print("orignal Beliefs is "+str(individuals[0]))

if(len(concensous) != 0 ):
    learnedBeliefs = SimulationUtils.learn(individuals[0], concensous, p1 )
    print("orignal Beliefs  "+str(individuals[0]))
    print("new Beliefs      "+str(learnedBeliefs))
    print("orignal payoff  "+str(SimulationUtils.payoff(individuals[0], reality, s)))
    print("new payoff      "+str(SimulationUtils.payoff(learnedBeliefs, reality, s)))
else:
    print("No one to learn from! Darn I'm so smart")
    print("orignal Beliefs did not change "+str(individuals[0]))


