from os import listdir
from os.path import isfile, join
import os
import logging
import csv
import sys
from collections import defaultdict
import numpy
import matplotlib.pyplot as plot
import matplotlib.lines as mlines

maxFields = 1000

def evenUpArrays(means, timeArray):
    meansLen = len(means)
    for ct in range(meansLen, len(timeArray)):
        means.append( means[meansLen-1] )

logger = logging.getLogger('Analysize WS Graph for Diversity')

# Set the log levels
logger.setLevel(logging.DEBUG)

mypath = "Doctoral.Research/Exploration.vs.Exploitation - Structural Design/results/ws-graph-turnover-realityChange"

dictonary = defaultdict(list)

resultsHeap = {0:[],0.01:[]}

filesProcessedCount = 0

for root, dirs, files in os.walk(mypath):
        
    for fileSt in files:
        if(fileSt.endswith("csv") ):
            #logger.debug( "    "+str(fileSt) )
            file = open(str(root)+"/"+str(fileSt), "r")
            try:
                reader = csv.reader(file, delimiter=',')
                csvFile = list(reader)
                numLines = len(csvFile)
                if(numLines > 10):
                    b = csvFile[numLines-1][8]
                    logger.debug(fileSt+" numLines "+str(numLines)+" B is "+str(b) )
                    payoff = 0.0
                    payoffs = []
                    for line in range(2, 1002): #numLines-2):
                            if( line > numLines-2):
                                payoffs.append(float(payoff))
                            else:
                                time = csvFile[line][0]
                                payoff = csvFile[line][1]
                                #logger.debug('payoff is '+str(payoff))
                                payoffs.append(float(payoff))          
                
                    logger.debug(payoffs)
                    resultsHeap[float(b)].append(payoffs)
                    filesProcessedCount += 1
                
            except:
                e = sys.exc_info()
                logger.warn( "unable to open file |"+str(root)+"/"+str(fileSt)+"|" )
                logger.error( e )
            
            file.close()
                   
logger.info(str(filesProcessedCount)+" Files loaded and processed. Dictonary populated !!!!!!!!!!!!!!")

sortedKeys = sorted(resultsHeap.keys(), key=float)   
                                                
logger.info("Dictonary sorted ")                
logger.info(sortedKeys)                
                
                
elements = resultsHeap.get(0)
logger.debug(elements)
means0 = numpy.mean(elements, axis=0) #elements[0] #[sum(column)/len(column) for column in zip(*elements)]
#evenUpArrays(means0, timeArray)    
logger.debug(means0)
timeArray = numpy.arange(len(means0)) #0., 50., 1)                

plot.plot(timeArray, means0, 'k:')

elements = resultsHeap.get(0.01)
#logger.debug(elements)
means1 = numpy.mean(elements, axis=0) #elements[0] #[sum(column)/len(column) for column in zip(*elements)]
evenUpArrays(means1, timeArray)    
plot.plot(timeArray, means1, 'k') 
    

plot.axis([0, 1000, 0,100])
plot.xlabel("Time")
plot.ylabel("Performance")
plot.title("Effect of Turnover on a WS Graph in Changing Environment")

noTurnover = mlines.Line2D([], [], color='black', linestyle=':', markersize=15, label='With turnover')
withTurnover = mlines.Line2D([], [], color='black', markersize=15, label='Without turnover')
plot.legend(handles=[withTurnover,noTurnover])

plot.show()                        
                                                                              